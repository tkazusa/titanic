# coding=utf-8

# write code...
import os
import pickle
import logging

import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score, log_loss, f1_score, roc_auc_score
from sklearn.model_selection import ParameterGrid, StratifiedKFold
from lightgbm.sklearn import LGBMClassifier


from bases.model import ModelBase
from util import Util



class ModelLgbm_3(ModelBase):
    """Model Base interface

    Methods:
        train:Trains and generates background model.
        save_model:Saves background model generated by train method to specified file path.
        load__model:Loads background model from specified file path.
    """

    def __init__(self):
        self.feature_importances_ = None


    def _set_algorithm(self, prms):
        model = LGBMClassifier(objective="binary",
                               n_estimators=1000,
                               learning_rate=0.05,
                               **prms)
        return model

    def train(self, prms, X_tr, y_tr, X_val, y_val,w_tr, w_val):

        self.model  = self._set_algorithm(prms)
        self.model.fit(X_tr, y_tr,
                  sample_weight=w_tr,
                  eval_sample_weight=[w_val],
                  #eval_set=[X_val, y_val],
                  eval_metric="logloss",
                  #early_stopping_rounds=20,
                  verbose=False
                  )

        self._score_acc = accuracy_score(y_val, self.model.predict(X_val), sample_weight=w_val)
        self._score_logloss = log_loss(y_val, self.model.predict_proba(X_val), sample_weight=w_val)

    def train_all(self, prms, X_tr, y_tr, w_tr):

        self.model  = self._set_algorithm(prms)
        self.model.fit(X_tr, y_tr,
                  sample_weight=w_tr,
                  eval_metric="logloss",
                  #early_stopping_rounds=20,
                  verbose=False
                  )
        self.feature_importances_ = self.model.feature_importances_

    def save_model(self):
        Util.dump(self.model, "models/model_lgb3.pkl")

    def load_model(self):
        model = Util.load("models/model_lgb3.pkl")
        self.model = model

    def predict(self, X):
        return self.model.predict(X)

    def predict_proba(self, X):
        return self.model.predict_proba(X)





